def smg():
    import streamlit as st
    import openai

    st.sidebar.success("Create flashcard questions based on a the text entered")

    def generate_content(text, content_type):
        """
        Generate educational content based on the extracted text.

        Parameters:
            text (str): The extracted text from the document.
            content_type (str): Type of content to generate ('notes' or 'quiz').

        Returns:
            str: Generated educational content.
        """
        # Initialize the OpenAI client
        openai.api_key='key'

        # Define the prompt depending on the required content type
        if content_type == 'notes':
            prompt_text = f"Summarize the following content into concise educational notes:\n\n{text}"
        elif content_type == 'quiz':
            prompt_text = f"Create quiz questions based on the following content:\n\n{text}"
        else:
            raise ValueError("Unsupported content type. Choose 'notes' or 'quiz'.")

        # Call the OpenAI API using the new chat completions method
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # Ensure this is an appropriate chat model
            messages=[
                {
                    "role": "user",
                    "content": prompt_text
                }
            ]
        )

        # Return the text generated by the AI
        return response.choices[0].message.content.strip()  # Update based on the structure of chat completions

    # Streamlit interface
    st.title("Study Material Generator")
    st.subheader("Generate educational 'notes' or 'quiz' based on input text")

    # Text input
    user_input_text = st.text_area("Enter your text here:", "Type or paste text here...")

    # Radio buttons for content type selection
    content_type = st.radio("Select content type:", ('notes', 'quiz'))

    # Button to generate content
    if st.button('Generate Content'):
        # Generate content based on the selected type and provided text
        generated_content = generate_content(user_input_text, content_type)
        # Display the generated content
        st.subheader("Generated Content:")
        st.write(generated_content)
