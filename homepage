import streamlit as st
from streamlit_option_menu import option_menu
import Study_Material_Generator, Lesson_Planner, Summarize_and_Quiz, User_Survey

# 1. as sidebar menu
with st.sidebar:
    selected = option_menu(
        menu_title="Navigation",
        options = ["Homepage", "User Survey", "Lesson Planner", "Study Material Generator", "Summarize and Quiz"],
        icons = ["house", "pencil-square", "book", "journals", "list-task"],
        menu_icon="cast",
        default_index=0,
    )

if selected == "Homepage":
    st.title("StudyGenius ProðŸ“š")

    st.text("This AI Classroom is designed to help you achieve your academic goals!")
    st.sidebar.success("Select a menu option to get started")
    st.image("D:\AI_Tutor\logo.png", use_column_width=True)

    st.title("Start your Studying Journey by using our Lesson Planner!ðŸ“…")

    import streamlit as st
    import openai

    openai.api_key = "Key"

    #create a wrapper function 
    def get_completion(prompt, system_message, model="gpt-3.5-turbo"):
        completion = openai.ChatCompletion.create(
            model=model,
            messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": prompt},
            ]
        )
        return completion.choices[0].message['content']

    st.write("This feature plays the role of a Socratic tutor to help you create a study plan or a study guide. Please enter the details of your lesson, and the tutor will assist you.")

    system_message = "You are a Socratic tutor. Use the following principles in responding to students:\n    \n    - Ask thought-provoking, open-ended questions that challenge students' preconceptions and encourage them to engage in deeper reflection and critical thinking.\n    - Facilitate open and respectful dialogue among students, creating an environment where diverse viewpoints are valued and students feel comfortable sharing their ideas.\n    - Actively listen to students' responses, paying careful attention to their underlying thought processes and making a genuine effort to understand their perspectives.\n    - Guide students in their exploration of topics by encouraging them to discover answers independently, rather than providing direct answers, to enhance their reasoning and analytical skills.\n    - Promote critical thinking by encouraging students to question assumptions, evaluate evidence, and consider alternative viewpoints in order to arrive at well-reasoned conclusions.\n    - Demonstrate humility by acknowledging your own limitations and uncertainties, modeling a growth mindset and exemplifying the value of lifelong learning."
    #create our streamlit app
    with st.form(key = "chat"):
        # Get the user's input
        lesson = st.text_input("Enter what the lesson is about:")
        chapters = st.number_input("Enter the number of chapters:", min_value=1, step=1)
        questions = st.number_input("Enter the number of questions on the exam:", min_value=1, step=1)

        # Create a text input for each chapter 
        chapter_descriptions = []
        for i in range(1, chapters + 1):
            chapter_description = st.text_input(f"Enter what chapter {i} is about:")
            chapter_descriptions.append(chapter_description)
        
        #Let the user choose between a study plan or a study guide
        study_type = st.selectbox("Select the type of study material you would like to create:", ["Study Plan", "Study Guide"])
        # When the user clicks the Submit button
        submitted = st.form_submit_button("Submit")

        if submitted:
            # Validate the user's input
            if not lesson:
                st.write("Please enter a valid lesson.")
            else:
                # Form the prompt based on the user's input
                chapter_details = " ".join([f"Chapter {i+1} is about {desc}." for i, desc in enumerate(chapter_descriptions)])
                if study_type == "Study Guide":
                    prompt = f"Generate a study guide with questions that the teacher covers based on the lesson {lesson}, which has {chapters} chapters and an exam with {questions} questions. {chapter_details}"
                else:
                    prompt = f"Generate a study plan based on the lesson {lesson}, which has {chapters} chapters and an exam with {questions} questions. {chapter_details}"
                try:
                    # Get the completion and write it to the app
                    st.write(get_completion(prompt, system_message))
                except IndexError:
                    # Handle the case where completion.choices is empty
                    st.write("Sorry, I couldn't generate a completion. Please try again.")

if selected == "Study Material Generator":
    Study_Material_Generator.smg()

if selected == "Lesson Planner":
    Lesson_Planner.study()

if selected == "Summarize and Quiz":
    Summarize_and_Quiz.summarize()

if selected == "User Survey":
    User_Survey.survey()
